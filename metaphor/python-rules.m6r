# Standard set of Python coding rules.

Context: Python implementation rules
    As an engineer working with the application, I want the application to be easy to use and understand,
    so I can maintain and enhance it over time.

    Context: Implement in Python 3
        The application will be written in the latest version of Python 3.  Assume a baseline of Python 3.10.

    Context: Indentation of code
        Code must be indented by 4 spaces.

    Context: Use docstrings
        Docstrings must be used to describe all modules, classes, and functions.  This should follow PEP 257 guidelines.

    Context: Use type hints
        Type hints must be used for function arguments and return values.

        As we're using Python 3.10 as a minimum, use union types.  E.g. use `T | None` instead of `Optional[T]`.

        `self` parameters do not need to have type hints.

    Context: Use comments
        Comments must be used to describe any complex logic, or rationale that would not be obvious from
        simply reading the code.  This ensures that anyone reading the code for the first time will be able
        to understand why the code is the way it is.

    Context: PEP 8 imports
        The import list in any module should follow PEP 8 guidelines, including the ordering of imports.

    Context: Avoid unnecessary `elif` and `else` statements
        To improve readability, do not use `elif` or `else` statements if the preceding `if` branch ends with
        a `return`, `continue`, or `break`.

        For example, do this:

        ```python
        if condition:
            return

        next_statement()
        ```

        instead of this:

        ```python
        if condition:
            return
        else:
            next_statement()
        ```

    Context: Handle error and exception paths early
        If it is possible to detect errors and exceptions early then do so.  Always prefer to do this as early
        as possible within the code so we have the fewest possible conditional checks by the time we reach the
        main purpose of any function or method.

        This is sometimes known as "flattening the code to the left" as there is generally less indentation required
        when we do this.  This makes the code easier to read.

    Context: Exception handling philosophy
        Context: Exception documentation
            Document what exceptions each function may raise in its docstring.

        Context: Handling exceptions
            We should attempt to handle and mitigate exceptions at the level closest to which they are first
            detected.  If we cannot handle or mitigate the exception then it should be wrapped in a domain-appropriate
            exception class and this re-raised to the next level up the call stack.

            Include contextual information when wrapping exceptions.

            Preserve the exception chain using `raise ... from e` syntax.

        Context: Avoid bare `except:` or `except Exception:` clauses.
            We should avoid the use of bare `except:` or `except Exception:` clauses unless a function we are calling
            can only have exceptions handled this way.

            We should always catch specific exception types that could occur from an operation.

        Context: Exception logging
            All exceptions should be logged when they occur, before re-raising or wrapping them.

            Use appropriate log levels:
            - ERROR for exceptions that indicate failure.
            - WARNING for exceptions that can be handled/recovered from.
            - DEBUG for detailed exception information during development.

            We must include sufficient context in log messages to aid debugging.

        Context: Exception wrapping example
            Do this:

            ```python
            try:
                await self.api_client.fetch_data()

            except ConnectionError as e:
                logger.error("Failed to retrieve data from API endpoint", exc_info=True)
                raise DataFetchError(f"Failed to retrieve data from API endpoint: {e}") from e

            except TimeoutError as e:
                logger.warning("API request timed out, will retry", exc_info=True)
                # Handle retry logic
            ```

            Not this:

            ```python
            try:
                await self.api_client.fetch_data()
            except Exception as e:
                logger.error(f"Error: {e}")  # Insufficient context, no stack trace
                raise  # No wrapping or additional context
            ```
